/*
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {  
    public List<List<Integer>> levelOrderBottom(TreeNode root) {  
        List<List<Integer>> list = new ArrayList<List<Integer>>();  
        if(root == null) return list;  
        LinkedList<TreeNode> queue = new LinkedList<TreeNode>();  
        queue.add(root);  
        queue.add(null);  
        List<Integer> sublist = new ArrayList<Integer>();  
        while(queue.size() > 0){  
            TreeNode node = queue.remove();  
            if(node != null){  
                sublist.add(node.val);  
                if(node.left != null) queue.add(node.left);  
                if(node.right != null) queue.add(node.right);  
            }else{  
                list.add(0,sublist);//和I相比只有这里不同  
                if(queue.size() > 0){  
                    sublist = new ArrayList<Integer>();  
                    queue.add(null);  
                }  
                  
            }  
        }  
        return list;  
    }  
}  
